// Declaração das configurações e funcionalidades do PIC.
#include "config.h"
#include "adc.h"
#include "lcd.h"
#include "pwm.h"
#include "timers.h"
#include "usart.h"
#include <stdlib.h>		// comando ftoa().
#include <stdio.h>		// comando sprintf().

//Variáveis Globais de Controle.

//-----------------------------------------------------------------------------

void interrupt ISR(void)
{
	unsigned char byte;

	// Tratamento da interrupção do buffer de recepção.
	if (PIR1bits.RCIF)
	{
		// Caso a interrupção seja ativada... 
		// a manipulação dos dados pode ser feita aqui!	

		// Flag de status da Interrupção do buffer de recepção da USART.
		PIR1bits.RCIF = 0;
	}
	
	if (TMR2IF) //interrupção do timer2
    {
		// Caso a interrupção seja ativada... 
		// a manipulação dos dados pode ser feita aqui!	

      	TMR2IF = 0;	//não será usado
    }
    
	if (CCP1IF) //interrupção do ccp1
    {
		// Caso a interrupção seja ativada... 
		// a manipulação dos dados pode ser feita aqui!	

      	CCP1IF = 0;	//não será usado
    }
    
	if (CCP2IF) //interrupção do ccp2
    {
		// Caso a interrupção seja ativada... 
		// a manipulação dos dados pode ser feita aqui!	

      	CCP2IF = 0;	//não será usado
    }
}

//-----------------------------------------------------------------------------

void main(void)
{
    TRISA = 0b00000000;		// Configuração dos canais analógicos do PORTA.
    PORTA = 0b00000000;  	// Inicialização dos canais analógicos do PORTA.
    TRISB = 0b00000000;		// Configuração das entradas/saídas do PORTB.
    PORTB = 0b00000000;  	// Inicialização das entradas/saídas do PORTB.
	TRISC = 0b10000000;		// Configuração do PORTC - pinos RC7(RX) e RC6(TX).
    PORTC = 0b11000000; 	// Inicialização dos pinos RX e TX em nível alto (Modo IDLE).
    TRISD = 0b00000000;		// Configuração das entradas/saídas do PORTD.		
    PORTD = 0b00000000;  	// Inicialização das das entradas/saídas do PORTD.
    TRISE = 0b00000000;		// Configuração dos canais analógicos do PORTE.
    PORTE = 0b00000000;  	// Inicialização dos canais analógicos do PORTE.

	// Inicialização do módulo USART do microcontrolador.
    USART_Init(115200);	 

	// Inicialização do módulo PWM do microcontrolador.
    PWM_Init();	 

	// Ativação das interrupções do microcontrolador.
	INTCONbits.PEIE	= 1;	// Habilita Interrupção de Periféricos do Microcontrolador.
	INTCONbits.GIE	= 1;	// Habilita Interrupção Global.

	USART_WriteString("Inicializando o PIC... \n\r\n\r");

	PWM_DutyCycle1(0);	 		
	PWM_DutyCycle2(0);	 	

	while(1)	//Laço Principal.
    {		
		USART_WriteString("PWM em 0%\n\r");
		PWM_DutyCycle1(0);	 	
		__delay_ms(2000);
		
		USART_WriteString("PWM em 25%\n\r");
		PWM_DutyCycle1(256);	 	
		__delay_ms(2000);

		USART_WriteString("PWM em 50%\n\r");
		PWM_DutyCycle1(512);	 	
		__delay_ms(2000);

		USART_WriteString("PWM em 75%\n\r");
		PWM_DutyCycle1(768);	 	
		__delay_ms(2000);

		USART_WriteString("PWM em 100%\n\r\n\r");
		PWM_DutyCycle1(1023);	 	
		__delay_ms(2000);	
    }   
}

//-----------------------------------------------------------------------------
void main(void)
{
    TRISA = 0b00000000;		// Configuração dos canais analógicos do PORTA.
    PORTA = 0b00000000;  	// Inicialização dos canais analógicos do PORTA.
    TRISB = 0b00000000;		// Configuração das entradas/saídas do PORTB.
    PORTB = 0b00000000;  	// Inicialização das entradas/saídas do PORTB.
    TRISC = 0b00000000;		// Configuração das entradas/saídas do PORTC.
    PORTC = 0b00000000;  	// Inicialização das entradas/saídas do PORTC.
    TRISD = 0b00000000;		// Configuração das entradas/saídas do PORTD.		
    PORTD = 0b00000000;  	// Inicialização das das entradas/saídas do PORTD.
    TRISE = 0b00000000;		// Configuração dos canais analógicos do PORTE.
    PORTE = 0b00000000;  	// Inicialização dos canais analógicos do PORTE.
	OPTION_REGbits.INTEDG = 0; // Configuração da borda de ativação. 
	INTCONbits.INTE = 1;       // Habilita a interrupção externa. 
	INTCONbits.INTF = 0;
	// Laço principal do firmware.
	while(1)
	{

	}
}
